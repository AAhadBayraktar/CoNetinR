% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/getNetwork.R
\name{getNetwork}
\alias{getNetwork}
\title{Build Network}
\usage{
getNetwork(mat = matrix(), method = "spearman", T.up = 0.2,
  T.down = -0.2, shuffle.samples = F, norm = FALSE, rarefy = 0,
  stand.rows = FALSE, pval.cor = F, permut = F, renorm = F,
  permutandboot = F, iters = 100, bh = F, min.occ = 0,
  keep.filtered = F, plot = F, report.full = F, verbose = F)
}
\arguments{
\item{mat}{user-provided matrix, can be left empty to generate one}

\item{method}{network construction method, values: "pearson", "spearman", "kld" or "bray"}

\item{T.up}{upper threshold for scores}

\item{T.down}{lower threshold for scores}

\item{shuffle.samples}{shuffle each sample before network construction}

\item{norm}{normalize matrix before network construction}

\item{rarefy}{if TRUE, rarefy matrix to the minimum total read count, if larger than 1, rarefy matrix to the given total read count}

\item{stand.rows}{standardize rows by dividing each entry by its corresponding row sum, applied after normalization and rarefaction and before network construction}

\item{pval.cor}{compute p-values of correlations with cor.test (cannot be selected together with permut, renorm and/or permutandboot or a method that is not a correlation)}

\item{permut}{compute p-values on edges with a simple permutation test}

\item{renorm}{compute p-values with a permutation test, using renormalization}

\item{permutandboot}{compute p-values from both permutation and bootstrap distribution}

\item{iters}{number of iterations for the permutation test}

\item{bh}{multiple-test-correct using Benjamini-Hochberg}

\item{min.occ}{only keep rows with at least the given number of non-zero values (carried out before network construction)}

\item{keep.filtered}{sum all filtered rows and add the sum vector as additional row}

\item{plot}{plot score or, if permut is true, p-value distribution}

\item{report.full}{in addition to positive edge percentage, return other output variables}

\item{verbose}{print the number of positive and negative edges and details of p-value computation}
}
\value{
postive edge percentage and more statistics depending on report.full
}
\description{
Build a network using Pearson, Spearman, Kullback-Leibler or Bray-Curtis
}
\details{
Takes care of all steps of network construction, by also performing rarefication, normalization, permutation and bootstrapping.
If ReNorm and permutandboot are both set to TRUE, this is equal to the ReBoot procedure implemented in CoNet.
The original CoNet implementation is available at: http://psbweb05.psb.ugent.be/conet/
}
